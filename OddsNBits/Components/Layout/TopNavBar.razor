@using System.Diagnostics
@using System.ComponentModel.DataAnnotations
@using OddsNBits.Data.Entities
@implements IDisposable

@inject NavigationManager NavigationManager
@inject ICategoryService CategoryService

<HxNavbar CssClass="oddsnav bg-white fixed-top navbar-light">
    <HxNavbarBrand>Odds &amp; Bits</HxNavbarBrand>
    <HxNavbarToggler />
    <HxNavbarCollapse>
        <HxNav CssClass="me-auto mb-2 mb-lg-0">
            <HxNavLink Href="/">Home</HxNavLink>
            @foreach(var c in _categories)
            {
                <HxNavLink Href=@($"/categories/{c.Slug}")>@c.Name</HxNavLink>
            }
            @* <HxDropdown> *@
            @*     <HxDropdownToggleElement ElementName="a" Caret="true" role="button">Categories</HxDropdownToggleElement> *@
            @*     <HxDropdownMenu> *@
            @*         <HxDropdownItemNavLink Href="/category">Category</HxDropdownItemNavLink> *@
            @*         <HxDropdownItemNavLink Href="#">Another action</HxDropdownItemNavLink> *@
            @*         <HxDropdownDivider /> *@
            @*         <HxDropdownItemNavLink Href="#">Something else here</HxDropdownItemNavLink> *@
            @*     </HxDropdownMenu> *@
            @* </HxDropdown> *@
        </HxNav>

        @*This form seems to cause issues when using other forms such as the login form*@
        @*<EditForm Model="@Input" method="post" FormName="SearchBar" OnValidSubmit="OnSearch">
        <DataAnnotationsValidator />
        <div class="d-flex">
        <HxInputText CssClass="me-2" Placeholder="Search" @bind-Value="Input.Query" InputMode="InputMode.Search"/>
        <ValidationMessage For="() => Input.Query" class="text-danger" />
        <HxSubmit Color="ThemeColor.Success" Outline="true">Search</HxSubmit>
        </div>
        </EditForm>*@

        <div class="d-flex px-3">
            <AuthorizeView>
                <Authorized>
                    <HxNavLink Href="admin/dashboard">
                        <HxIcon Icon="@BootstrapIcon.Briefcase"/> Dashboard
                    </HxNavLink>
                    <HxNavLink Href="Account/Manage">
                        <HxIcon Icon="@BootstrapIcon.Person"/> @context.User.DisplayName()
                    </HxNavLink>
                    @* <NavLink Href="Account/Manage"> *@
                    @*     <HxIcon Icon="@BootstrapIcon.Person"/> @context.User.DisplayName() *@
                    @* </NavLink> *@
                    <div class="nav-item px-3">
                        <form action="Account/Logout" method="post">
                            <AntiforgeryToken/>
                            <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
                            <HxSubmit Color="ThemeColor.Danger" Outline="true">Logout</HxSubmit>
                            @*<button type="submit" class="nav-link">
                            Logout
                            </button>*@
                        </form>
                    </div>
                </Authorized>
                <NotAuthorized>
                    @* <NavLink href="Account/Register" class="btn btn-primary"> *@
                    @*     Register *@
                    @* </NavLink> *@

                    <NavLink href="Account/Login" class="btn btn-primary" style="margin-left: 3px">
                        Login
                    </NavLink>
                </NotAuthorized>
            </AuthorizeView>
        </div>

    </HxNavbarCollapse>
</HxNavbar>


@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    private Category[] _categories = [];
    private const int MaxShownCategories = 5;


    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        var categories = await CategoryService.GetCategoriesAsync();

        // Only show the first 5 featured categories - these will be on the navbar AND the dropdown
        _categories = categories.Where(c => c.Featured).Take(MaxShownCategories).ToArray();

        if(_categories.Length < MaxShownCategories)
        {
            _categories = [.. _categories, .. categories.Where(c => !c.Featured).Take(MaxShownCategories - _categories.Length)];
        }

    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }

    private void OnSearch()
    {
        // Temporary
        Debug.WriteLine($"Search for {Input.Query}");
    }

    private sealed class InputModel
    {
        [Required]
        public string Query { get; set; } = "";

    }

}