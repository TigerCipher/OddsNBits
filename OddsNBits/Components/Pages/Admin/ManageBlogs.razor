@page "/admin/manage-posts"
@page "/admin/manage-posts/{SavedId:int?}"

@using System.Diagnostics
@using OddsNBits.Data
@using OddsNBits.Data.Entities


@rendermode @(new InteractiveServerRenderMode(prerender: false))

@inject IPostAdminService PostService
@inject IHxMessageBoxService MessageBox
@inject IHxMessengerService Messenger
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment WebHost

<DashboardHeader Title="Manage Posts">
    <ActionButtons>
        <NavLink Href="/author/new-post" class="btn btn-sm btn-primary"><HxIcon Icon="BootstrapIcon.PlusCircle" /> New Post</NavLink>
    </ActionButtons>
</DashboardHeader>


<HxListLayout Title="Posts" TFilterModel="BlogPostFilter" @bind-FilterModel="_filterModel" @bind-FilterModel:after="_gridComponent.RefreshDataAsync">
    <CommandsTemplate>
        <NavLink Href="/author/new-post" class="btn btn-sm btn-primary"><HxIcon Icon="BootstrapIcon.PlusCircle" /> New Post</NavLink>
    </CommandsTemplate>
    <FilterTemplate Context="filterCtx">
        <HxInputText Label="Title" @bind-Value="filterCtx.Title" />
        <HxInputDateRange @bind-Value="filterCtx.CreationDate" Label="Creation Date Range" CalendarIcon="BootstrapIcon.Calendar" />
        <HxCheckbox Text="Show only published posts" @bind-Value="filterCtx.ShowOnlyPublished" />
        <HxCheckbox Text="Show only featured posts" @bind-Value="filterCtx.ShowOnlyFeatured" />
    </FilterTemplate>
    <DataTemplate>
        <HxGrid @ref="_gridComponent" TItem="BlogPost" DataProvider="GetGridData" Striped="true"
                PageSize="_pageSize" Responsive="true" @bind-SelectedDataItem="_currentPost">
            <Columns>
                <HxGridColumn HeaderText="ID" ItemTextSelector="c => c.Id.ToString()" />
                @* <HxGridColumn HeaderText="Title" ItemTextSelector="c => c.Title" ItemCssClass="grid-max-width" /> *@
                @* <HxGridColumn HeaderText="Slug" ItemTextSelector="c => c.Slug" ItemCssClass="grid-max-width" /> *@
                <HxGridColumn HeaderText="Details">
                    <ItemTemplate>
                        <div class=@(context.IsMainFeature ? "py-2 text-success" : "py-2") style="display: grid; grid-template-columns: 60px auto; grid-column-gap: 8px">
                            <img src="@context.Image" style="height: 60px; width: 60px; object-fit: cover" alt="Thumbnail image for @context.Title"/>
                            <div>
                                <label class="mb-0 d-block">@context.Title</label>
                                @if (context.IsPublished)
                                {
                                    <NavLink Href="@($"/posts/{context.Slug}")" target="_blank">@context.Slug</NavLink>
                                }
                                else
                                {
                                    <label class="disabled">@context.Slug</label>
                                }
                            </div>
                        </div>
                    </ItemTemplate>
                </HxGridColumn>
                <HxGridColumn HeaderText="Category" ItemTextSelector="c => c.Category.Name" ItemCssClass="grid-max-width" />
                <HxGridColumn HeaderText="Created On" ItemTextSelector="c => c.CreatedOn.ToShortDateString()" />
                <HxGridColumn HeaderText="Last Modified" ItemTextSelector="c => c.ModifiedOn?.ToShortDateString() ?? string.Empty" />
                <HxGridColumn HeaderText="Is Featured?">
                    <ItemTemplate>
                        @if (context.IsFeatured)
                        {
                            <label class="text-success">
                                <input type="checkbox" checked="checked" @onchange="@(() => OnFeatureChange(context))" /> Yes
                            </label>
                        }
                        else
                        {
                            <label class="text-danger">
                                <input type="checkbox" @onchange="@(() => OnFeatureChange(context))" /> No
                            </label>
                        }
                    </ItemTemplate>
                </HxGridColumn>
                <HxGridColumn HeaderText="Is Published?">
                    <ItemTemplate>
                        @if (context.IsPublished)
                        {
                            <label class="text-success">
                                <input type="checkbox" checked="checked" @onchange="@(() => OnPublishChange(context))" /> Yes
                            </label>
                        }
                        else
                        {
                            <label class="text-danger">
                                <input type="checkbox" @onchange="@(() => OnPublishChange(context))" /> No
                            </label>
                        }
                    </ItemTemplate>
                </HxGridColumn>
                <HxContextMenuGridColumn Context="post">
                    <HxContextMenu>
                        <NavLink Href=@($"/author/edit/{post.Id}") data-enhance-nav="false" class="text-black">
                            <HxContextMenuItem Icon="BootstrapIcon.Pen" Text="Edit" />
                        </NavLink>
                        <HxContextMenuItem Icon="BootstrapIcon.Fire" Text="Make Main Feature" IconCssClass="text-danger" OnClick="() => OnMainFeatureChange(post)"/>
                        <HxContextMenuItem Text="Delete" Icon="BootstrapIcon.Trash" IconCssClass="text-danger"
                                           OnClick="() => OnDelete(post)" ConfirmationQuestion="@($"Are you sure you want to delete the post '{post.Title}'? This is irreversible.")" />
                    </HxContextMenu>
                </HxContextMenuGridColumn>
            </Columns>
            <PaginationTemplate Context="pagination">
                @{
                    int totalPages = (pagination.TotalCount + pagination.PageSize - 1) / pagination.PageSize;
                    int firstItemPosition = pagination.CurrentUserState.PageIndex * pagination.PageSize + 1;
                    int lastItemPosition = Math.Min(firstItemPosition + pagination.PageSize - 1, pagination.TotalCount);
                }
                <div class="row">
                    <div class="col d-flex gap-2 align-items-center">
                        Rows per page: <HxSelect @bind-Value="@_pageSize" Data="_pageSizes" Nullable="false" AutoSort="false" InputSize="InputSize.Small" />
                    </div>
                    <div class="col d-flex justify-content-center align-items-center">
                        Showing @firstItemPosition to @lastItemPosition of @_totalCount entries
                    </div>
                    <div class="col d-flex align-items-center justify-content-end">
                        <HxButton Icon="BootstrapIcon.ChevronBarLeft" Enabled="pagination.CurrentUserState.PageIndex > 0"
                                  OnClick="() => pagination.ChangeCurrentPageIndexAsync(0)" Color="ThemeColor.Link" />
                        <HxButton Icon="BootstrapIcon.ChevronLeft" Enabled="pagination.CurrentUserState.PageIndex > 0"
                                  OnClick="() => pagination.ChangeCurrentPageIndexAsync(pagination.CurrentUserState.PageIndex - 1)" Color="ThemeColor.Link" />
                        <HxButton Icon="BootstrapIcon.ChevronRight" Enabled="pagination.CurrentUserState.PageIndex + 1 < totalPages"
                                  OnClick="() => pagination.ChangeCurrentPageIndexAsync(pagination.CurrentUserState.PageIndex + 1)" Color="ThemeColor.Link" />
                        <HxButton Icon="BootstrapIcon.ChevronBarRight" Enabled="pagination.CurrentUserState.PageIndex + 1 < totalPages"
                                  OnClick="() => pagination.ChangeCurrentPageIndexAsync(totalPages - 1)" Color="ThemeColor.Link" />
                    </div>
                </div>
            </PaginationTemplate>
        </HxGrid>
    </DataTemplate>
    <DetailTemplate>
        Selected Post: { ID: <strong>@_currentPost?.Id</strong> , Title: <strong>@_currentPost?.Title</strong> , Slug: <strong>@_currentPost?.Slug</strong> }
    </DetailTemplate>
</HxListLayout>



@if (_isLoading)
{
    <Loader Text="@_loadingText" />
}

@* <style type="text/css"> *@
@*     .table > tbody > tr > td { *@
@*         vertical-align: middle; *@
@*         horiz-align: center; *@
@*     } *@
@*     .table > thead > th { *@
@*         vertical-align: middle; *@
@*         horiz-align: center; *@
@*     } *@
@* </style> *@

@code {

    [Parameter]
    public int? SavedId { get; set; }

    private HxGrid<BlogPost> _gridComponent;
    private BlogPost _currentPost;

    private bool _isLoading;
    private string? _loadingText;

    private int _pageSize = 10;
    private readonly List<int> _pageSizes = [5, 10, 20, 30];

    private BlogPostFilter _filterModel = new();

    private int _totalCount;

    protected override async Task OnInitializedAsync()
    {
        _totalCount = await PostService.GetTotalCount();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (SavedId != null && SavedId != 0)
        {
            var post = await PostService.GetByIdAsync(SavedId!.Value);
            if (post is not null)
            {
                Messenger.AddInformation("Success", $"Post '{post!.Title}' saved successfully!");
            }
            else
            {
                Messenger.AddError("Unexpected Error", $"Failed to save post with ID: {SavedId} - could not find a post with this ID to save");
            }
        }
    }


    private async Task<GridDataProviderResult<BlogPost>> GetGridData(GridDataProviderRequest<BlogPost> request)
    {
        // var query = (await CategoryService.GetCategoriesAsync()).AsQueryable();

        return new GridDataProviderResult<BlogPost>()
            {
                Data = (await PostService.GetFilteredAsync(_filterModel, request.StartIndex, request.Count!.Value)).Records,
                TotalCount = _totalCount
            };
    }


    private async Task OnDelete(BlogPost post)
    {
        var title = post.Title;
        var imageUrl = post.Image;
        _isLoading = true;
        _loadingText = $"Deleting post '{title}'";
        try
        {
            await PostService.DeleteAsync(post);
        }
        catch (Exception ex)
        {
            Messenger.AddError($"Failed to delete post '{title}'");
            _isLoading = false;
            return;
        }

        // Delete the image
        var imgPath = imageUrl.Replace('/', '\\');
        var fullpath = Path.Combine(WebHost.WebRootPath, imgPath);
        try
        {
            File.Delete(fullpath);
        }
        catch (Exception e)
        {
            Debug.WriteLine($"[WARNING] Failed to delete image: {imageUrl} from {fullpath}");
        }

        await _gridComponent.RefreshDataAsync();
        Messenger.AddInformation(title: "Success", message: $"Post '{title}' has been deleted");
        _isLoading = false;
    }

    private async Task OnFeatureChange(BlogPost post)
    {
        _loadingText = "Saving changes";
        _isLoading = true;
        post.IsFeatured = !post.IsFeatured;
        await PostService.SaveAsync(post, post.UserId);
        _isLoading = false;
        NavigationManager.Refresh();
    }

    private async Task OnPublishChange(BlogPost post)
    {
        _loadingText = "Saving changes";
        _isLoading = true;
        post.IsPublished = !post.IsPublished;
        await PostService.SaveAsync(post, post.UserId);
        _isLoading = false;
        NavigationManager.Refresh();
    }

    private async Task OnMainFeatureChange(BlogPost post)
    {
        _loadingText = "Changing the main feature";
        _isLoading = true;
        post.IsMainFeature = true;
        await PostService.SaveAsync(post, post.UserId);
        _isLoading = false;
        NavigationManager.Refresh(true);
    }

}
