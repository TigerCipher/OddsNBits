@page "/posts/{Slug}"
@using System.Web
@using OddsNBits.Data.Entities

@* @rendermode InteractiveServer *@
@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@

@* @inject IJSRuntime Js *@

@inject IPostService PostService
@inject NavigationManager NavigationManager

<PageTitle>@_post.Title | Odds &amp; Bits</PageTitle>

<PageScript Src="./Components/Pages/BlogPostPage.razor.js?counter" />

@if (_found)
{
    <!--------------------------------------
    HEADER
    --------------------------------------->
    <div class="container">
        <div class="jumbotron jumbotron-fluid mb-3 pl-0 pt-0 pb-0 bg-white position-relative">
            <div class="h-100 tofront bg-white">
                <div class="row justify-content-between">
                    <div class="col-md-6 pt-6 pb-6 pr-6 align-self-center">
                        <p class="text-uppercase font-weight-bold">
                            <NavLink class="text-danger" href="@($"/categories/{_post.Category.Slug}")">See more @_post.Category.Name Posts</NavLink>
                        </p>
                        <h1 class="display-4 secondfont mb-3 font-weight-bold">@_post.Title</h1>
                        <p class="mb-3">
                            @_post.Introduction
                        </p>
                        <div class="d-flex align-items-center">
                            @if (!string.IsNullOrWhiteSpace(_post.User.Image))
                            {
                                <img class="rounded-circle" src="@_post.User.Image" width="70">
                            }
                            else
                            {
                                <img class="rounded-circle" src="@($"https://ui-avatars.com/api/?name={HttpUtility.UrlEncode(_post.User.DisplayName)}&background=random")" width="70">
                            }
                            <small class="ml-2">
                                @_post.User.DisplayName
                                <span class="text-muted d-block">@_post.PublishedOn?.ToLongDateString()</span>
                            </small>
                        </div>
                    </div>
                    <div class="col-md-6 pr-0" style="background-size: cover; background-image: url(@_post.Image)">
                        @* <img src="@_post.Image" alt="@($"Thumbnail for '{_post.Title}'")" style="background-size: cover"> *@
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!-- End Header -->
    <!--------------------------------------
    MAIN
    --------------------------------------->

    <div class="container pt-4 pb-4">
        <div class="row justify-content-center">
            <div class="col-lg-2 pr-4 mb-4 col-md-12">
                <div class="sticky-top text-center">
                    @*<div class="text-muted">
                Share this
                </div>*@
                    <ShareThis Author="@_post.User.DisplayName" Slug="@Slug" Title="@_post.Title" />
                </div>
            </div>
            <div class="col-md-12 col-lg-10">
                <article class="article-post">
                    @((MarkupString)_post.Content)
                </article>
                @if (_post.ModifiedOn is not null)
                {
                    <p>Last modified on @_post.ModifiedOn?.ToLongDateString()</p>
                }
                @*<SubscribeForm />*@
            </div>
        </div>
        <hr />
        <div class="container pt-4 pb-4">
            <h5 class="font-weight-bold spanborder"><span>Read more related posts</span></h5>
            <BlogListBlock Posts="_related" />
        </div>
        <hr />
        <Comments BlogId="_post.Id" />
    </div>
}


@code {

    [Parameter]
    public string Slug { get; set; }

    private BlogPost _post = new();

    private bool _found;

    private BlogPost[] _related = [];

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(Slug)) return;
        var post = await PostService.GetBySlugAsync(Slug);
        if (post.IsEmpty())
        {
            NavigationManager.NavigateTo("/", replace: true);
            return;
        }
        _found = true;
        _post = post.Post!;

        _related = post.Related;
    }
}
