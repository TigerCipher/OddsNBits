@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.CompilerServices
@using Microsoft.AspNetCore.Components.Rendering
@using OddsNBits.Data.Entities

@rendermode InteractiveServer

@inject ICommentService CommentService;
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager;

Comments
<EditForm Model="_model" OnValidSubmit="SubmitComment">
    <DataAnnotationsValidator />
    <InputTextArea @bind-Value="_model.Comment" placeholder="Enter your comment" />
    <ValidationMessage For="() => _model.Comment" />
    <HxSubmit Color="ThemeColor.Success">Submit</HxSubmit>
</EditForm>
<hr />
@foreach (var c in _comments.Take(_numberCommentsToShow))
{
    <div class="comment-header">
        <div>@c.Content</div>
        <div class="d-flex justify-content-start">
            <div class="mr-3">
                By @c.User.DisplayName on @c.CreatedDate.ToShortDateString()
            </div>
            <div>
                <HxButton OnClick="() => ShowReplyEditor(c.Id)" Icon="BootstrapIcon.ArrowReturnLeft">Reply</HxButton>
            </div>
        </div>
    </div>


    @if (c.Id == _replyId)
    {
        <div class="reply-editor">
            <EditForm Model="_replyModel" OnValidSubmit="() => OnReply(c)">
                <DataAnnotationsValidator />
                <InputTextArea @bind-Value="_replyModel.Comment" placeholder="Enter your reply" />
                <ValidationMessage For="() => _replyModel.Comment" />
                <HxSubmit Color="ThemeColor.Success">Submit</HxSubmit>
            </EditForm>
        </div>
    }

    @if (_replies.ContainsKey(c) && _replies[c].Any())
    {
        <div class="replies">
            @DisplayReplies(_replies[c])
        </div>
    }


}

@if (_comments.Count > _numberCommentsToShow)
{
    <HxButton Color="ThemeColor.Link" Text="Load More" OnClick="LoadMore" CssClass="mt-3" Outline="true"/>
}

@code {

    [Parameter, EditorRequired]
    public int BlogId { get; set; }


    private List<Comment> _comments = new();
    private Dictionary<Comment, List<Comment>> _replies = new();

    private int _replyId;

    private int _numberCommentsToShow;
    private int _numberCommentsLoaded;

    protected override async Task OnInitializedAsync()
    {
        if (!_comments.Any())
        {
            var list = await CommentService.GetAllAsync(BlogId);
            _comments = list.Where(c => !c.ParentCommentId.HasValue).ToList();
            _numberCommentsToShow = 5;
            foreach (var comment in list.ToList())
            {
                await PopulateRepliesAsync(comment);
            }
        }
    }

    private async Task PopulateRepliesAsync(Comment comment)
    {
        var rlist = await CommentService.GetAllReplies(comment.Id);
        _replies[comment] = rlist.ToList();

        foreach (var r in rlist)
        {
            await PopulateRepliesAsync(r);
        }
    }

    private void LoadMore()
    {
        _numberCommentsToShow += 5;
        StateHasChanged();
    }

    private async Task SubmitComment()
    {
        // try
        // {
        Comment cmt = new();
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userid = authState.User.UserId();

        cmt.Content = _model.Comment;
        await CommentService.AddNewAsync(cmt, userid, BlogId);

        NavigationManager.Refresh(true);
        // }catch(Exception ex)
        // {
        // }
    }

    private async Task OnReply(Comment parent)
    {
        if (string.IsNullOrWhiteSpace(_replyModel.Comment))
        {
            _replyId = 0;
            return;
        }
        Comment cmt = new();
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var userid = authState.User.UserId();
        cmt.Content = _replyModel.Comment;
        await CommentService.AddNewReply(cmt, parent, userid, BlogId);
        NavigationManager.Refresh(true);
        _replyId = 0;
    }

    private void ShowReplyEditor(int commentId)
    {
        _replyId = commentId;
    }

    RenderFragment DisplayReplies(List<Comment> comments) => builder =>
    {
        foreach (var c in comments)
        {
            builder.AddContent(2, RenderComment(c));

            // Recursive call for nested replies
            if (_replies.ContainsKey(c) && _replies[c].Any())
            {
                builder.OpenElement(3, "div");
                builder.AddAttribute(4, "class", "replies");
                builder.AddContent(5, DisplayReplies(_replies[c]));
                builder.CloseElement();
            }

        }
    };

    // Helper method to render individual comment
    RenderFragment RenderComment(Comment comment) => builder =>
    {
        /*
         *    <div class="comment-header">
               <div>@c.Content</div>
               <div class="d-flex justify-content-start">
                   <div class="mr-3">
                       By @c.User.DisplayName on @c.CreatedDate.ToShortDateString()
                   </div>
                   <div>
                       <HxButton OnClick="() => ShowReplyEditor(c.Id)" Icon="BootstrapIcon.ArrowReturnLeft">Reply</HxButton>
                   </div>
               </div>
           </div>
         */
        int sequence = 0;
        builder.OpenElement(sequence++, "div"); // <div class="comment-header">
        builder.AddAttribute(sequence++, "class", "comment-header");
        builder.OpenElement(sequence++, "div"); // <div>
        builder.AddContent(sequence++, $"{comment.Content}");
        builder.CloseElement(); // content div
        builder.OpenElement(sequence++, "div"); // <div class="d-flex justify-content-start">
        builder.AddAttribute(sequence++, "class", "d-flex justify-content-start");
        builder.OpenElement(sequence++, "div"); // <div class="mr-3">
        builder.AddAttribute(sequence++, "class", "mr-3");
        builder.AddContent(sequence++, $"By {comment.User.DisplayName} on {comment.CreatedDate.ToShortDateString()}");
        builder.CloseElement(); // inner mr-3 div
        builder.OpenElement(sequence++, "div"); // <div>

        // Reply button
        builder.OpenComponent<HxButton>(sequence++);
        builder.AddAttribute(sequence++, "Text", "Reply");
        builder.AddAttribute(sequence++, "OnClick", EventCallback.Factory.Create<MouseEventArgs>(this, () => ShowReplyEditor(comment.Id)));
        builder.AddAttribute(sequence++, "Icon", BootstrapIcon.ArrowReturnLeft);
        builder.CloseComponent();

        builder.CloseElement(); // inner button div
        builder.CloseElement(); // inner d-flex div
        builder.CloseElement(); // comment-header div

        // Reply editor
        if (comment.Id != _replyId) return;
        builder.OpenElement(sequence++, "div");
        builder.AddAttribute(sequence++, "class", "reply-editor");
        builder.AddContent(sequence++, RenderReplyEditor(comment));
        builder.CloseElement();

        // builder.CloseElement();
    };


    // Helper method to render reply editor
    RenderFragment RenderReplyEditor(Comment comment) => builder =>
    {
        int sequence = 0;
        builder.OpenComponent<EditForm>(sequence++);
        builder.AddAttribute(sequence++, "Model", _replyModel);
        builder.AddAttribute(sequence++, "OnValidSubmit", EventCallback.Factory.Create<EditContext>(this, () => OnReply(comment)));


        // Open the EditForm section
        builder.AddAttribute(sequence++, "ChildContent", (RenderFragment<EditContext>)((context) => (builder2) =>
        {
            // Add the DataAnnotationsValidator component
            // builder2.OpenComponent<DataAnnotationsValidator>(sequence++);
            // builder2.CloseComponent();

            // Add the InputTextArea component
            builder2.OpenComponent<InputTextArea>(sequence++);
            builder2.AddComponentParameter(sequence++, "Value", RuntimeHelpers.TypeCheck(_replyModel.Comment));
            builder2.AddComponentParameter(sequence++,
                "ValueChanged",
                RuntimeHelpers.TypeCheck(EventCallback.Factory.Create(this,
                    RuntimeHelpers.CreateInferredEventCallback(this,
                        value => _replyModel.Comment = value,
                        _replyModel.Comment))));
            builder2.AddComponentParameter(sequence++, "ValueExpression", RuntimeHelpers.TypeCheck<Expression<Func<string>>>(() => _replyModel.Comment));
            builder2.AddAttribute(sequence++, "Placeholder", "Enter your reply");
            builder2.CloseComponent();

            // Add the ValidationMessage component
            // builder2.OpenComponent<ValidationMessage<string>>(sequence++);
            // builder2.AddComponentParameter(sequence++, "For", );
            // builder2.CloseComponent();

            // Add the HxSubmit component
            builder2.OpenComponent<HxSubmit>(sequence++);
            builder2.AddComponentParameter(sequence++, "Color", ThemeColor.Success);
            builder2.AddComponentParameter(sequence++, "Text", "Submit");
            builder2.CloseComponent();

        }));

        builder.CloseComponent();
    };

    private readonly FormModel _model = new();
    private readonly FormModel _replyModel = new();

    private class FormModel : ICloneable
    {
        [Required]
        public string Comment { get; set; }

        public object Clone() => MemberwiseClone();
    }
}
